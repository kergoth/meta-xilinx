From 46e193b3afed1e27680ca8dfd2914da91577e484 Mon Sep 17 00:00:00 2001
From: Yasir-Khan <yasir_khan@mentor.com>
Date: Wed, 18 Jan 2017 23:12:43 +0500
Subject: [PATCH] arm64: KGDB: 64-bit pstate -> 32-bit pstate

In GDB, the corresponding definition for pstate register is
32-bit cpsr register in aarch64-core.xml target description file.
However, kgdb's register description file defines pstate to be
64-bit in size. This mismatch of register sizes results in
"Remote 'g' packet reply is too long" error when GDB tries to
initiate connection with kgdb.

cpsr is 32-bit, but it only exists aarch32 execution state.  As in
ARMv8 reference manual, "A1.3.1 Execution state"

 "The A32 and T32
 instruction sets include instructions that operate directly on
 various PSTATE elements, and  instructions that access PSTATE by
 using the Application Program Status Register (APSR)  or the
 Current Program Status Register (CPSR)".

In other words, there is no cpsr at all on aarch64 execution
state. On aarch64 execution state, pstate is an abstraction of
process state information, so it has no architecturally defined
size or enconding.

However, the architecture does define how the PSTATE is encoded
in the SPSR when taking an exception, and that is the form of
PSTATE in ptrace.  Currently only bits 31:0 of SPSR are defined.

So it is safe to set the size of pstate register to 32-bits
in kgdb register description file to resolve the above mentioned
connection error.

[Ref: https://sourceware.org/ml/gdb-patches/2015-09/msg00082.html]

Signed-off-by: Yasir-Khan <yasir_khan@mentor.com>
---
 arch/arm64/include/asm/kgdb.h | 5 +++--
 arch/arm64/kernel/kgdb.c      | 2 +-
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/include/asm/kgdb.h b/arch/arm64/include/asm/kgdb.h
index f69f69c..a34cfc8 100644
--- a/arch/arm64/include/asm/kgdb.h
+++ b/arch/arm64/include/asm/kgdb.h
@@ -61,7 +61,7 @@ extern int kgdb_fault_expected;
  * general purpose registers size in bytes.
  * pstate is only 4 bytes. subtract 4 bytes
  */
-#define GP_REG_BYTES		(_GP_REGS * 8)
+#define GP_REG_BYTES		(_GP_REGS * 8 - 4)
 #define DBG_MAX_REG_NUM		(_GP_REGS + _FP_REGS + _EXTRA_REGS)
 
 /*
@@ -78,7 +78,8 @@ extern int kgdb_fault_expected;
  * "'g' packet reply is too long"
  */
 
-#define NUMREGBYTES	((_GP_REGS * 8) + (_FP_REGS * 16) + \
+/* pstate is only 4 bytes. subtract 4 bytes */
+#define NUMREGBYTES	((_GP_REGS * 8 - 4 ) + (_FP_REGS * 16) + \
 			(_EXTRA_REGS * 4))
 
 #endif /* __ASM_KGDB_H */
diff --git a/arch/arm64/kernel/kgdb.c b/arch/arm64/kernel/kgdb.c
index bcac81e..ee30167 100644
--- a/arch/arm64/kernel/kgdb.c
+++ b/arch/arm64/kernel/kgdb.c
@@ -58,7 +58,7 @@ struct dbg_reg_def_t dbg_reg_def[DBG_MAX_REG_NUM] = {
 	{ "x30", 8, offsetof(struct pt_regs, regs[30])},
 	{ "sp", 8, offsetof(struct pt_regs, sp)},
 	{ "pc", 8, offsetof(struct pt_regs, pc)},
-	{ "pstate", 8, offsetof(struct pt_regs, pstate)},
+	{ "pstate", 4, offsetof(struct pt_regs, pstate)},
 	{ "v0", 16, -1 },
 	{ "v1", 16, -1 },
 	{ "v2", 16, -1 },
-- 
2.8.1

